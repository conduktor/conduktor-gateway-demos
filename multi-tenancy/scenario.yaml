title: Multi tenancy
tag: ops
ciTags:
  - NON_REGRESSION
services:
  kafka1:
    properties:
      bootstrap.servers: localhost:19092,localhost:19093,localhost:19094
  kafka2:
    properties:
      bootstrap.servers: localhost:19092,localhost:19093,localhost:19094
  kafka3:
    properties:
      bootstrap.servers: localhost:19092,localhost:19093,localhost:19094
  gateway1:
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8888
    environment:
      GATEWAY_MODE: VCLUSTER
  gateway2:
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8888
    environment:
      GATEWAY_MODE: VCLUSTER

actions:

  - type: INTRODUCTION
    title: Multi-tenancy, virtual clusters

  - type: ASCIINEMA

  - type: FILE
    filename: docker-compose.yaml

  - type: DOCKER
    command: docker compose up --detach --wait

  - type: LIST_TOPICS
    kafka: kafka1
    assertExists:
      - _conduktor_gateway_auditlogs
      - _conduktor_gateway_acls
      - _conduktor_gateway_license
      - _conduktor_gateway_interceptor_configs
      - _conduktor_gateway_consumer_subscriptions
      - _conduktor_gateway_consumer_offsets
      - _conduktor_gateway_topicmappings
      - _schemas

  - type: CREATE_VIRTUAL_CLUSTER
    gateway: gateway1
    name: london

  - type: CREATE_VIRTUAL_CLUSTER
    gateway: gateway1
    name: paris

  - type: CREATE_TOPICS
    kafka: london
    kafkaConfig: london-sa.properties
    topics:
      - name: londonTopic
        replicationFactor: 1
        partitions: 1

  - type: CREATE_TOPICS
    kafka: paris
    kafkaConfig: paris-sa.properties
    topics:
      - name: parisTopic
        replicationFactor: 1
        partitions: 1

  - type: LIST_TOPICS
    kafka: london
    kafkaConfig: london-sa.properties
    assertExists:
      - londonTopic

  - type: LIST_TOPICS
    kafka: paris
    kafkaConfig: paris-sa.properties
    assertExists:
      - parisTopic

  - type: PRODUCE
    kafka: london
    kafkaConfig: london-sa.properties
    topic: londonTopic
    messages:
      - value: '{"message: "Hello from London"}'

  - type: CONSUME
    kafka: london
    kafkaConfig: london-sa.properties
    topic: londonTopic
    assertSize: 1

  - type: PRODUCE
    kafka: paris
    kafkaConfig: paris-sa.properties
    topic: parisTopic
    messages:
      - value: '{"message: "Bonjour depuis Paris"}'

  - type: CONSUME
    kafka: paris
    kafkaConfig: paris-sa.properties
    topic: parisTopic
    assertSize: 1

  - type: CREATE_TOPICS
    kafka: kafka1
    topics:
      - name: existingLondonTopic
        replicationFactor: 1
        partitions: 1

  - type: PRODUCE
    kafka: kafka1
    topic: existingLondonTopic
    messages:
      - value: '{"message: "Hello from London"}'

  - type: SH
    title: Map the existing topic to the virtual cluster
    kafka: kafka1
    showOutput: true
    script: |
      curl \
        --silent \
        --request POST localhost:8888/admin/vclusters/v1/vcluster/london/topics/existingLondonTopic \
        --user 'admin:conduktor' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "physicalTopicName": "existingLondonTopic",
            "readOnly": false,
            "type": "alias"
          }' | jq

  - type: LIST_TOPICS
    kafka: london
    kafkaConfig: london-sa.properties
    assertExists:
      - londonTopic
      - existingLondonTopic

  - type: CREATE_TOPICS
    kafka: kafka1
    topics:
      - name: existingSharedTopic
        replicationFactor: 1
        partitions: 1

  - type: PRODUCE
    kafka: kafka1
    topic: existingSharedTopic
    messages:
      - value: '{"message": "Existing shared message"}'

  - type: SH
    title: Map the existing topic to the virtual cluster
    showOutput: true
    kafka: kafka1
    script: |
      curl \
        --silent \
        --request POST localhost:8888/admin/vclusters/v1/vcluster/london/topics/existingSharedTopic \
        --user 'admin:conduktor' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "physicalTopicName": "existingSharedTopic",
          "readOnly": false,
          "type": "alias"
        }' | jq

  - type: LIST_TOPICS
    kafka: london
    kafkaConfig: london-sa.properties
    assertExists:
      - londonTopic
      - existingLondonTopic
      - existingSharedTopic

  - type: CONSUME
    kafka: london
    kafkaConfig: london-sa.properties
    topic: existingLondonTopic
    assertSize: 1
    assertions:
      - description: Assert contains the original london topic message
        value:
          operator: contains
          expected: '{"message: "Hello from London"}'

  - type: CONSUME
    kafka: london
    kafkaConfig: london-sa.properties
    topic: existingSharedTopic
    assertSize: 1
    assertions:
      - description: Assert contains the original shared topic message
        value:
          operator: containsIgnoreCase
          expected: '{"message": "Existing shared message"}'

  - type: SH
    title: Map the existing topic to the virtual cluster
    showOutput: true
    kafka: kafka1
    script: |
      curl \
        --silent \
        --request POST localhost:8888/admin/vclusters/v1/vcluster/paris/topics/existingSharedTopic \
        --user 'admin:conduktor' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "physicalTopicName": "existingSharedTopic",
          "readOnly": false,
          "type": "alias"
        }' | jq

  - type: LIST_TOPICS
    kafka: paris
    kafkaConfig: paris-sa.properties
    assertExists:
      - parisTopic
      - existingSharedTopic

  - type: CONSUME
    kafka: paris
    kafkaConfig: paris-sa.properties
    topic: existingSharedTopic
    assertSize: 1
    assertions:
      - description: Assert contains the original shared topic message
        value:
          operator: containsIgnoreCase
          expected: '{"message": "Existing shared message"}'

  - type: DOCKER
    command: docker compose down --volumes

  - type: CONCLUSION
    markdown: |
      Multi-tenancy/Virtual clusters is key to be in control of your kafka spend!

