title: Chaos Duplicate Messages
services:
  kafka1:
    properties:
      bootstrap.servers: localhost:19092,localhost:19093,localhost:19094
  kafka2:
    properties:
      bootstrap.servers: localhost:19092,localhost:19093,localhost:19094
  kafka3:
    properties:
      bootstrap.servers: localhost:19092,localhost:19093,localhost:19094
  gateway1:
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8888
  gateway2:
    properties:
      bootstrap.servers: localhost:6969
      gateway.host: http://localhost:8889

actions:

  - type: INTRODUCTION
    title: Chaos Duplicate Messages
    markdown: |
      This interceptor injects duplicate records on produce requests.
      
      This demo will run you through some of these use cases step-by-step.

  - type: ASCIINEMA

  - type: FILE
    filename: docker-compose.yaml

  - type: DOCKER
    command: docker compose up --detach --wait

  - type: CREATE_VIRTUAL_CLUSTER
    gateway: gateway1
    name: teamA

  - type: FILE
    title: Review the kafka properties to connect to `teamA`
    filename: teamA-sa.properties

  - type: CREATE_TOPICS
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topics:
      - name: topic-duplicate
        replicationFactor: 1
        partitions: 1

  - type: ADD_INTERCEPTOR
    gateway: gateway1
    vcluster: teamA
    name: duplicate-messages
    interceptor:
      "pluginClass": "io.conduktor.gateway.interceptor.chaos.DuplicateMessagesPlugin"
      "priority": 100
      "config": {
        "rateInPercent": 100,
        "topic": "topic-duplicate",
        "target": "PRODUCE"
      }
    markdown: |
      Let's create the interceptor against the virtual cluster `teamA`, instructing Conduktor Gateway to inject duplicate records on produce requests.

  - type: LIST_INTERCEPTORS
    gateway: gateway1
    vcluster: teamA
    assertSize: 1
    assertNames:
      - duplicate-messages

  - type: PRODUCE
    title: Send message to our created topic
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: topic-duplicate
    messages:
      - value: '{"message": "hello world"}'

  - type: CONSUME
    title: Let's consume the message, and confirm message was duplicated
    kafka: teamA
    kafkaConfig: teamA-sa.properties
    topic: topic-duplicate
    assertSize: 2
    assertions:
      - value:
          operator: contains
          expected: '{"message": "hello world"}'
      - value:
          operator: contains
          expected: '{"message": "hello world"}'

  - type: DOCKER
    command: docker compose down --volumes

  - type: CONCLUSION
    markdown: |
      Yes, Chaos Duplicate Messages is simple as it!